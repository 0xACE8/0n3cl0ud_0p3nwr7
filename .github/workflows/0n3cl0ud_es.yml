name: immortalwrt

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: f33d5.c0nf.d3f4ul7
  CONFIG_FILE: 0n3cl0ud.c0nf
  DIY_P1_SH: d1y-p4r71.sh
  DIY_P2_SH: d1y-p4r72.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: "America/Los_Angeles"

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: ÈáäÊîæÁ£ÅÁõòÁ©∫Èó¥
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Ê£ÄÊü•ÂàÜÊîØ
      uses: actions/checkout@main

    - name: ÁºñËØëÁéØÂ¢É
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: ÂÖãÈöÜÊ∫ê‰ª£Á†Å
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: install turboacc and patch
      working-directory: ./openwrt
      run: |
        mkdir -p turboacc_tmp ./package/turboacc
        cd turboacc_tmp
        git clone https://github.com/chenmozhijin/turboacc -b package
        cd ../package/turboacc
        git clone https://github.com/fullcone-nat-nftables/nft-fullcone
        git clone https://github.com/chenmozhijin/turboacc
        mv ./turboacc/luci-app-turboacc ./luci-app-turboacc
        rm -rf ./turboacc
        cd ../..
        cp -f turboacc_tmp/turboacc/hack-6.1/952-add-net-conntrack-events-support-multiple-registrant.patch ./target/linux/generic/hack-6.1/952-add-net-conntrack-events-support-multiple-registrant.patch
        cp -f turboacc_tmp/turboacc/hack-6.1/953-net-patch-linux-kernel-to-support-shortcut-fe.patch ./target/linux/generic/hack-6.1/953-net-patch-linux-kernel-to-support-shortcut-fe.patch
        cp -f turboacc_tmp/turboacc/pending-6.1/613-netfilter_optional_tcp_window_check.patch ./target/linux/generic/pending-6.1/613-netfilter_optional_tcp_window_check.patch
        rm -rf ./package/libs/libnftnl ./package/network/config/firewall4 ./package/network/utils/nftables
        mkdir -p ./package/network/config/firewall4 ./package/libs/libnftnl ./package/network/utils/nftables
        cp -r ./turboacc_tmp/turboacc/shortcut-fe ./package/turboacc
        cp -RT ./turboacc_tmp/turboacc/firewall4-$(grep -o 'FIREWALL4_VERSION=.*' ./turboacc_tmp/turboacc/version | cut -d '=' -f 2)/firewall4 ./package/network/config/firewall4
        cp -RT ./turboacc_tmp/turboacc/libnftnl-$(grep -o 'LIBNFTNL_VERSION=.*' ./turboacc_tmp/turboacc/version | cut -d '=' -f 2)/libnftnl ./package/libs/libnftnl
        cp -RT ./turboacc_tmp/turboacc/nftables-$(grep -o 'NFTABLES_VERSION=.*' ./turboacc_tmp/turboacc/version | cut -d '=' -f 2)/nftables ./package/network/utils/nftables
        rm -rf turboacc_tmp
        echo "# CONFIG_NF_CONNTRACK_CHAIN_EVENTS is not set" >> target/linux/generic/config-6.1
        echo "# CONFIG_SHORTCUT_FE is not set" >> target/linux/generic/config-6.1
        sed -i 's/Turbo ACC ÁΩëÁªúÂä†ÈÄü/ÁΩëÁªúÂä†ÈÄü/g' package/turboacc/luci-app-turboacc/po/zh-cn/turboacc.po

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Updata & install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a
        
    - name: Âä†ËΩΩËá™ÂÆö‰πâËÑöÊú¨
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH        
        
      
    - name: ‰∏ãËΩΩocÂÜÖÊ†∏
      run: |
        chmod +x $DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: Âä†ËΩΩËá™ÂÆö‰πâÈÖçÁΩÆ
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: ‰∏ãËΩΩÁºñËØë‰æùËµñ
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: ÁºñËØëÂõ∫‰ª∂
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV


    - name: ÊâìÂåÖÁõ¥Âà∑ÂåÖ
      run: |
          sudo apt install img2simg
          ver="v0.3.1"
          curl -L -o ./AmlImg https://github.com/hzyitc/AmlImg/releases/download/$ver/AmlImg_${ver}_linux_amd64
          chmod +x ./AmlImg
          curl -L -o ./uboot.img https://github.com/shiyu1314/u-boot-onecloud/releases/download/build-20230901-0443/eMMC.burn.img
          ./AmlImg unpack ./uboot.img burn/
          echo "::endgroup::"
          gunzip openwrt/bin/targets/*/*/*.gz
          diskimg=$(ls openwrt/bin/targets/*/*/*.img)
          loop=$(sudo losetup --find --show --partscan $diskimg)
          img_ext="openwrt.img"
          img_mnt="xd"
          rootfs_mnt="img"
          boot_img=$1${img_ext}
          boot_img_mnt=$1${img_mnt}
          rootfs_img_mnt=$1${rootfs_mnt}
          echo ${boot_img}
          echo ${boot_img_mnt}
          echo ${rootfs_img_mnt}
          sudo rm -rf ${boot_img}
          sudo rm -rf ${boot_img_mnt}
          sudo rm -rf ${rootfs_img_mnt}
          sudo dd if=/dev/zero of=${boot_img} bs=1M count=500
          sudo mkfs.ext4 ${boot_img}
          sudo mkdir ${boot_img_mnt}
          sudo mkdir ${rootfs_img_mnt}
          sudo mount ${boot_img} ${boot_img_mnt}
          sudo mount ${loop}p2 ${rootfs_img_mnt}
          cd ${rootfs_img_mnt}
          sudo cp -r * ../${boot_img_mnt}
          cd ..
          sudo sync
          sudo umount ${boot_img_mnt}
          sudo umount ${rootfs_img_mnt}
          sudo img2simg ${loop}p1 burn/boot.simg
          sudo img2simg openwrt.img burn/rootfs.simg
          sudo rm -rf *.img
          sudo losetup -d $loop
          cat <<EOF >>burn/commands.txt
          PARTITION:boot:sparse:boot.simg
          PARTITION:rootfs:sparse:rootfs.simg
          EOF
          prefix=$(ls openwrt/bin/targets/*/*/*.img | sed 's/\.img$//')
          burnimg=${prefix}.burn.img
          ./AmlImg pack $burnimg burn/
          for f in openwrt/bin/targets/*/*/*.burn.img; do
            sha256sum "$f" >"${f}.sha"
            xz -9 --threads=0 --compress "$f"
          done
          sudo rm -rf openwrt/bin/targets/*/*/*.img
          sudo rm -rf openwrt/bin/targets/*/*/*.gz

    - name: Êü•ÁúãÁ£ÅÁõò‰ΩøÁî®ÊÉÖÂÜµ
      if: (!cancelled())
      run: df -hT

    - name: Êï¥ÁêÜÊñá‰ª∂
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        rm -rf *.buildinfo
        rm -rf profiles.json
        rm -rf *.manifest
        rm -rf *.sha
        rm -rf sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    
    - name: ‰∏ä‰º†Êñá‰ª∂Âà∞Actions
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        
    - name: ÁîüÊàêReleasesÊ†áÁ≠æ
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "üîó [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "üîó [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: ‰∏ä‰º†Âõ∫‰ª∂Âà∞Releases
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
              
        
    - name: Ê∏ÖÁêÜReleases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
